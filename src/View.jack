class View {
  field int length;  field int oldLength;
  field Snake snake;
  field Block target;
  field int dir;

  static boolean terminated;
  static int speed;

  constructor View init(int len) {
    var int userSeed;
    do Screen.clearScreen();
    do Rand.setSeed(View.askSeed());
    do Block.setBlockInfo(10, 1);   //устанавливаем ширину и окантовку для блоков (у блока эти поля статичны)
    let length = len;
    let oldLength = len;
    let snake = Snake.init(length);   //создаём змейку
    let target = Block.newRandBlock(snake, length);   //создаём яблоко
    let dir = 1;  //задаём начальное направление влево
    let speed = 100;   //задаём время одного тика
    let terminated = false;
    do Sys.wait(speed);
    return this;
  }

  function int askSeed() {
    // Unable to check type due to design of Jack language
    var int userSeed;
    var String message0, message1, message2, message3;
    var String exp0, exp1, exp2, exp3, exp4;
    var boolean matched;
    var Array tmpUsedNum;
    let message0 = "Welcome to the SNAKE GAME!";    //выводим начальные сообщения и выбираем seed для рандома
    let message1 = "Choose your lucky number (1~99).";
    let message2 = "Hit enter when you've done choosen: ";
    let message3 = "Invalid number. Choose again (1~99): ";
    let exp0 = "RULES";
    let exp1 = "1. Use arrow key to move the snake.";
    let exp2 = "2. The speed increases when your snake grows.";
    let exp3 = "3. If you run into wall or snake body, you lose.";
    let exp4 = "4. When snake grows to 75 blocks long, you win.";
    do Screen.clearScreen();
    do Output.moveCursor(0, 0);
    do Output.printString(message0);
    do Output.println();
    do Output.printString(message1);
    do Output.println();
    do Output.println();
    do Output.printString(exp0); 
    do Output.println();
    do Output.printString(exp1); 
    do Output.println();
    do Output.printString(exp2); 
    do Output.println();
    do Output.printString(exp3); 
    do Output.println();
    do Output.printString(exp4); 
    do Output.println();
    do Output.println();
    let userSeed = Keyboard.readInt(message2); //ввод seed-а
    while ((userSeed > 99) | (userSeed < 0)) {
      let userSeed = Keyboard.readInt(message3);
    }
    do Screen.clearScreen();    //очищаем экран и убираем из памяти все строчки
    do message0.dispose();
    do message1.dispose();
    do message2.dispose();
    do message3.dispose();
    do exp0.dispose();
    do exp1.dispose();
    do exp2.dispose();
    do exp3.dispose();
    do exp4.dispose();
    return userSeed;
  }
 
  method boolean move() {
    var int key, hit;
    var boolean lose, matched, restart;
    var String loseMessage0, loseMessage1, c3, c2, c1; 
    var String winMessage;
    let loseMessage0 = "You lose!";
    let loseMessage1 = "The game will restart in 3 secs...";
    let c3 = "3.. ";
    let c2 = "2.. ";
    let c1 = "1.. ";
    let winMessage = "Your snake is 75 blocks long! You win!";
    while (~(terminated)) {
      let terminated = true;
      let key = Keyboard.keyPressed();
      if ((key = 132) & ~(dir = 2)) {let dir = 1;}
      if ((key = 130) & ~(dir = 1)) {let dir = 2;}
      if ((key = 131) & ~(dir = 4)) {let dir = 3;}
      if ((key = 133) & ~(dir = 3)) {let dir = 4;}
      let lose = Block.seeIfLose(length, snake, dir);   //возращает true если змейка ударилась
      if (lose) {
        let terminated = true;
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
        do Output.printString(loseMessage0);    //передвигаем курсор в левый нижний угол и выводим сообщение о проигрыше
        do Output.println();
        do Output.printString(loseMessage1);
        do Output.println();
        do Output.println();
        do Sys.wait(1000);   //ждём и производим обратный отсчёт
        do Output.printString(c3);
        do Sys.wait(1000);
        do Output.printString(c2);
        do Sys.wait(1000);
        do Output.printString(c1);
        do Sys.wait(1000);
        do loseMessage0.dispose();    //чистим память от строк
        do loseMessage1.dispose();
        do c3.dispose();
        do c2.dispose();
        do c1.dispose();
        do winMessage.dispose();
        let restart = true;   //подаём на вывод true
      } else {
        let matched = Block.matched(snake[length - 1], target, dir);  //проверяет лежит ли яблоко в клетке куда игрок повернул змейку
        if (matched) {
          let snake = Snake.lengthenSnake(snake, length, target);   //если лежит то удлиняем змейку
          let length = length + 1;     
          let target = Block.newRandBlock(snake, length);   //создаём следующее яблоко
          if ((length - oldLength) = 10) {
            let speed = speed - (speed / 4);
            let oldLength = length;
          }  //скорость увеличивается при изменении длины
        } else {
          do Snake.moveSnake(snake, length, dir); //если яблоко не лежит то просто двигаем змейку
        }
        do Sys.wait(speed);   //ждём один тик
        if (length = 75) {    //если змейка увеличилась до 75 то выводим сообщения о выигрыше
          do Screen.clearScreen();
          do Output.moveCursor(0, 0);
          do Output.printString(winMessage);
          do Output.println();
          do Output.printString(loseMessage1);  //запускаем таймер обратного отсчёта как при проигрыше
          do Output.println();
          do Output.println();
          do Sys.wait(1000);
          do Output.printString(c3);
          do Sys.wait(1000);
          do Output.printString(c2);
          do Sys.wait(1000);
          do Output.printString(c1);
          do Sys.wait(1000);
          do loseMessage0.dispose();    //удаляем из памяти все сообщения
          do loseMessage1.dispose();
          do c3.dispose();
          do c2.dispose();
          do c1.dispose();
          do winMessage.dispose();
          let restart = true;
        } else {
          let terminated = false;
        }
      }
    }
    return restart;
  }

  method void dispose() {   //удаляем яблоко, змейку и сам класс
    do Snake.dispose(snake, length);
    do Block.dispose(target);
    do Memory.deAlloc(this);
    return;
  }
}