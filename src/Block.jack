class Block {
  // Координаты блока
  field int xCoord, yCoord;
  // Статики для ширины блока, отступа
  static int blockW, margin;

  // Конструктор для создания нового блока с заданными координатами
  constructor Block new(int x, int y) {
    let xCoord = x;
    let yCoord = y;
    return this;
  }

  method int getX() {
    return xCoord;
  }

  method int getY() {
    return yCoord;
  }

  // Генерация случайного блока еды, который не пересекается с змейкой
  function Block newRandBlock(Snake snake, int length) {
    var int randX, randY, i, blockX, blockY;
    var Block randBlock, tmpBlock;
    var boolean matched;

    // Генерация случайных координат для нового блока
    let randX = Rand.randRange(50);
    let randY = Rand.randRange(24);
    let i = 0;
    let matched = false;

    // Проверка, не пересекается ли новый блок с текущим состоянием змейки.
    while (i < length) {
      let tmpBlock = snake[i];
      let blockX = tmpBlock.getX();    // Получение X-координаты блока змейки. (в завис. от boolean)
      let blockY = tmpBlock.getY();    // Получение Y-координаты блока змейки. 

      // Проверка совпадения координат нового блока с координатами блока змейки.
      if ((blockX = randX) & (blockY = randY)) {
        let matched = true;
      }
      let i = i + 1; 
    }

    // Если новый блок еды совпадает с одним из блоков змейки, генерируем новые координаты.
    while (matched) {
      let matched = false;
      let randX = Rand.randRange(50);    // Генерируем новые координаты положения еды
      let randY = Rand.randRange(24);
      let i = 0;
      while (i < length) {
        let tmpBlock = snake[i];    // Текущий блок
        let blockX = tmpBlock.getX(); 
        let blockY = tmpBlock.getY();
        if ((blockX = randX) & (blockY = randY)) { // Проверка на совпадение еды и змейки
          let matched = true;
        }
        let i = i + 1; 
      }
    }
    let randBlock = Block.new(randX, randY);
    do Block.drawRandBlock(randBlock);   // Новый блок еды
    // do Block.printBlockCoord(randBlock);
    return randBlock;
  }

  // Проверка совпадения блоков
  function boolean matched(Block head, Block target, int dir) {   //получаем координаты яблока как target
    var int headX, headY, targetX, targetY;
    var boolean matched;
    let matched = false;
    let headX = head.getX();
    let headY = head.getY();
    if (dir = 1){let headX = headX + 1;}    // dir == 1 вправо, dir == 2 влево, 
    if (dir = 2){let headX = headX - 1;}
    if (dir = 3){let headY = headY - 1;}    // dir == 3 вниз, dir == 4 вверх
    if (dir = 4){let headY = headY + 1;}
    let targetX = target.getX();
    let targetY = target.getY();
    if ((headX = targetX) & (headY = targetY)) {    // Если координаты равны - совпали
      let matched = true;   //т.к яблоко единственное то если координаты яблока и следующего блока не совпали то мы врезаемся в себя
    }
    return matched;
  } 
  
  // Перемещение головного блока
  function Block moveHeadBlock(Block headBlock, int dir) {
    var int newXCoord, newYCoord;
    var Block newHeadBlock;
    let newXCoord = headBlock.getX();
    let newYCoord = headBlock.getY();
    if (dir = 1) {let newXCoord = newXCoord + 1;}      // В зависимости от нажатия кнопки
    if (dir = 2) {let newXCoord = newXCoord - 1;}      // Меняем координату головы
    if (dir = 3) {let newYCoord = newYCoord - 1;}
    if (dir = 4) {let newYCoord = newYCoord + 1;}
    let newHeadBlock = Block.new(newXCoord, newYCoord);    // Создаем новый блок головы, рисуем
    do Block.drawFullBlock(newHeadBlock, true);
    return newHeadBlock;
  }

  // Проверка условий проигрыша
  function boolean seeIfLose(int length, Snake snake, int dir) { // length - длина змейки
    var boolean bumpWall, bumpBody, lose;       // Стукнулся в стену или в хвост
    var int headX, headY, i, newLength, tmpX, tmpY;    // newLength - новая длина змейки
    var Block head, tmpBlock;
    let bumpWall = false;
    let bumpBody = false;
    let lose = false;
    let newLength = length - 1;
    let head = snake[newLength];
    let headX = head.getX();
    let headY = head.getY();
    if (dir = 1){let headX = headX + 1;}     // dir == 1 вправо, dir == 2 влево, 
    if (dir = 2){let headX = headX - 1;}
    if (dir = 3){let headY = headY - 1;}     // dir == 3 вниз, dir == 4 вверх
    if (dir = 4){let headY = headY + 1;}
    // Проверка, вышла ли голова змейки за пределы игрового поля. 
    // Если да, то bumpWall устанавливается в true.
    if ((headX < 0) | (headX > 50) | (headY > 24) | (headY < 0)) {
      let bumpWall = true; 
    } 
    let i = 1;
    while (i < newLength) {
      let tmpBlock = snake[i];
      let tmpX = tmpBlock.getX();
      let tmpY = tmpBlock.getY();
      // Проверка, совпадает ли текущее положение головы змейки 
      // с любым из блоков змейки. 
      if ((headX = tmpX) & (headY = tmpY)) {
        let bumpBody = true;
      }
      let i = i + 1;
    }
    if ((bumpWall) | (bumpBody)) {
      let lose = true;
    }
    return lose; // Произошло ли поражение
  }
 
  // Освобождение памяти
  function void dispose(Block block) {
    do Memory.deAlloc(block);
    return;
  }

  // Установка информации о блоке
  function void setBlockInfo(int blockWidth, int blockMargin) {
    let blockW = blockWidth;
    let margin = blockMargin;
    return;
  }
  
  // Отрисовка полного блока
  function void drawFullBlock(Block block, boolean color) {
    var int x1, y1, x2, y2;
    var int xIndx, yIndx;
    let xIndx = block.getX();
    let yIndx = block.getY();
    let x1 = xIndx * blockW + margin;
    let y1 = yIndx * blockW + margin;
    let x2 = xIndx * blockW + blockW - margin;
    let y2 = yIndx * blockW + blockW - margin;
    do Screen.setColor(color);
    do Screen.drawRectangle(x1, y1, x2, y2);
    return;
  }

  // Отрисовка случайного блока
  function void drawRandBlock(Block randBlock) {
    var int innerX1, innerY1, innerX2, innerY2;
    var int xIndx, yIndx;
    do Block.drawFullBlock(randBlock, true);
    let xIndx = randBlock.getX();
    let yIndx = randBlock.getY();
    let innerX1 = xIndx * blockW + margin + 1;
    let innerY1 = yIndx * blockW + margin + 1;
    let innerX2 = xIndx * blockW + blockW - margin - 1; 
    let innerY2 = yIndx * blockW + blockW - margin - 1; 
    do Screen.setColor(false);
    do Screen.drawRectangle(innerX1, innerY1, innerX2, innerY2);
    return;
  }

  // Отладочный вывод координат блока
  function void printBlockCoord(Block block) {
    var String uParam, comma, lParam;
    var int xIndx, yIndx;
    let xIndx = block.getX();
    let yIndx = block.getY();
    let uParam = "(";
    let comma = ",";
    let lParam = ")";
    do Output.printString(uParam);
    do Output.printInt(xIndx);
    do Output.printString(comma);
    do Output.printInt(yIndx);
    do Output.printString(lParam);
    do Output.println();
    do uParam.dispose();
    do comma.dispose();
    do lParam.dispose();
    return;
  }
}